# https://taskfile.dev
version: '3'

silent: true

vars:
  DOCKER_COMPOSE_FILES: |-
    docker-compose.yml
    docker-compose.sentry.yml
    docker-compose.swagger-ui.yml
  DOCKER_COMPOSE_CMD: |-
    docker compose {{range $file := .DOCKER_COMPOSE_FILES | splitLines -}} -f ./deploy/local/{{$file}} {{end}}

  ENT_SCHEMA: ./internal/store/schema

  GO_MODULE: github.com/ekhvalov/bank-chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: "1.54.2"
  GOLANGCI_LINT_URL: "https://github.com/golangci/golangci-lint/releases/download/v{{.GOLANGCI_LINT_VERSION}}"
  GOLANGCI_LINT_DIR: "golangci-lint-{{.GOLANGCI_LINT_VERSION}}-{{OS}}-amd64"
  GOLANGCI_LINT_ARCHIVE_FILE: "{{.GOLANGCI_LINT_DIR}}.tar.gz"
  GOLANGCI_LINT_CHECKSUMS_FILE: "golangci-lint-{{.GOLANGCI_LINT_VERSION}}-checksums.txt"

  TOOLS_DIR:
    sh: echo "$(pwd)/tools/bin"
  TOOLS_COVERAGE_DIR:
    sh: echo "$(pwd)/tools/coverage"

env:
  COMPOSE_PROJECT_NAME: bankchat

tasks:
  default:
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  deps:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.CLI_ARGS}}"

  deps:cmd:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"

  deps:status:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} ps -a"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICES: postgres

  deps:reset-kafka:
    cmds:
      - task: deps:reset
        vars:
          SERVICES: kafka zookeeper

  deps:reset:
    cmds:
      - for: { var: SERVICES }
        cmd: "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.ITEM}}"
      - for: { var: SERVICES }
        cmd: "{{.DOCKER_COMPOSE_CMD}} up -d {{.ITEM}}"

  deps:sentry-key:
    dir: ./deploy/local # TODO: duplication
    cmds:
      - 'echo "SENTRY_SECRET_KEY=\"{{.SENTRY_KEY}}\"" >> .env'
    vars:
      SENTRY_KEY:
        sh: docker run --rm --quiet sentry:9.1.2 config generate-secret-key
    status:
      - test -f .env
      - grep SENTRY_SECRET_KEY .env

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - "{{.TOOLS_DIR}}/gofumpt -w {{.GO_FILES}}"
    - "{{.TOOLS_DIR}}/gci write {{.GO_FILES}} --custom-order -s standard -s default -s Prefix\\({{.GO_MODULE}}\\)"

  lint:
    cmds:
      - echo "- Lint"
      - task: lint:cmd
        vars: { CLI_ARGS: "run -v --fix --timeout=5m ./..." }

  lint:cmd:
    cmds:
      - "{{.TOOLS_DIR}}/golangci-lint run -v --fix --timeout=5m ./..."

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  generate:
    aliases: [ "gen" ]
    cmds:
      - task: gen:go
      - task: gen:types
      - task: ent:gen
      - task: gen:api

  gen:go:
    cmds:
      - echo "Run go generate ./..."
      - 'PATH="{{.TOOLS_DIR}}:$PATH" go generate ./...'

  gen:types:
    vars:
      TYPES: |-
        ChatID
        EventID
        FailedJobID
        JobID
        MessageID
        ProblemID
        UserID
        RequestID
      TYPES_PKG: types
      TYPES_DST: ./internal/types/types.gen.go
    cmds:
      - echo "Generate types..."
      - 'go run ./cmd/gen-types {{.TYPES_PKG}} {{.TYPES | splitLines | join "," }} {{.TYPES_DST}}'

  gen:api:
    vars:
      API_TYPES: |
        client
        manager
    cmds:
      - for: { var: API_TYPES }
        vars:
          TYPE: "{{.ITEM}}"
        task: gen:api-for-type
#      - for: { var: API_V1_TYPES }
#        task: gen:api-v1-e2e
#        vars:
#          TYPE: "{{.ITEM}}"
#      - task: gen:api-events
#      - task: gen:api-events-e2e

  gen:api-for-type:
    internal: true
    cmds:
      - "echo 'generate api for type: {{.TYPE}}'"
      - task: gen:api-v1
        vars: { TYPE: "{{.TYPE}}" }
      - task: gen:api-v1-e2e
        vars: { TYPE: "{{.TYPE}}" }
      - task: gen:api-events
        vars: { TYPE: "{{.TYPE}}" }
      - task: gen:api-events-e2e
        vars: { TYPE: "{{.TYPE}}" }

  gen:api-v1:
    internal: true
    vars:
      SRC: "./api/{{.TYPE}}.v1.swagger.yml"
      DIR: "./internal/server-{{.TYPE}}/v1"
      DST: "{{.DIR}}/server.gen.go"
      PKG: "{{.TYPE}}v1"
    cmds:
      - "echo 'generate api v1 for: {{.TYPE}}'"
      - "mkdir -p {{.DIR}}"
      - "{{.TOOLS_DIR}}/oapi-codegen --old-config-style -generate types,server,spec -package {{.PKG}} {{.SRC}} > {{.DST}}"

  gen:api-v1-e2e:
    internal: true
    vars:
      DIR: "./tests/e2e/api/{{.TYPE}}/v1"
      DST: "{{.DIR}}/{{.TYPE}}.gen.go"
      SRC: "./api/{{.TYPE}}.v1.swagger.yml"
      PKG: "api{{.TYPE}}v1"

    cmds:
      - echo "[E2E] Generate {{.TYPE}} API..."
      - "mkdir -p {{.DIR}}"
      - "{{.TOOLS_DIR}}/oapi-codegen --old-config-style -generate types,client,spec -package {{.PKG}} {{.SRC}} > {{.DST}}"

  gen:api-events:
    internal: true
    vars:
      SRC: "./api/{{.TYPE}}.events.swagger.yml"
      DST_DIR: "./internal/server-{{.TYPE}}/events"
      DST: "{{.DST_DIR}}/events.gen.go"
      PKG: "{{.TYPE}}events"
    cmds:
      - "mkdir -p {{.DST_DIR}}"
      - "{{.TOOLS_DIR}}/oapi-codegen --old-config-style -generate skip-prune,types,spec -package {{.PKG}} -o {{.DST}} {{.SRC}}"

  gen:api-events-e2e:
    internal: true
    vars:
      SRC: "./api/{{.TYPE}}.events.swagger.yml"
      DST_DIR: "./tests/e2e/api/{{.TYPE}}/events"
      DST: "{{.DST_DIR}}/events.gen.go"
      PKG: "api{{.TYPE}}events"
    cmds:
      - "echo '[E2E] Generate {{.TYPE}} events...'"
      - "mkdir -p {{.DST_DIR}}"
      - "{{.TOOLS_DIR}}/oapi-codegen --old-config-style -generate skip-prune,types -package {{.PKG}} {{.SRC}} > {{.DST}}"

  ent:new:
    cmds:
      - "{{.TOOLS_DIR}}/ent new --target {{.ENT_SCHEMA}} {{.CLI_ARGS}}"
      - task: tidy

  ent:gen:
    cmds:
      - 'PATH="{{.TOOLS_DIR}}:$PATH" go generate {{.GO_MODULE}}/internal/store'
      - task: tidy

  tests:
    aliases: [ "tests:unit" ]
    cmds:
      - echo "- Tests"
      - go test -race ./... | grep -v '\[no test files\]'

  tests:e2e:
    dir: ./deploy/local
    env:
      COMPOSE_PROJECT_NAME: bankchate2e
    cmds:
      - echo "- End-to-end tests"
      - docker compose --file docker-compose.e2e.yml rm --force --stop --volumes
      - docker compose --file docker-compose.e2e.yml up --renew-anon-volumes --remove-orphans --exit-code-from tester

  tests:integration:
    # Create file '.env' to provide environment variables listed below, and replace values with yours.
    # TEST_LOG_LEVEL=info
    # TEST_KEYCLOAK_BASE_PATH="http://localhost:3010"
    # TEST_KEYCLOAK_REALM=Bank
    # TEST_KEYCLOAK_CLIENT_ID=integration-testing
    # TEST_KEYCLOAK_CLIENT_SECRET=ku3uEwc7nVGlzcidXfdAz1nBYJMfIjKt
    # TEST_KEYCLOAK_TEST_USER=integration-testing
    # TEST_KEYCLOAK_TEST_PASSWORD=password
    dotenv: [ ".env" ]
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./... | grep -v '\[no test files\]'

  tests:all:
    cmds:
      - task: tests
      - task: tests:integration
      - task: tests:e2e

  tests:coverage:
    dotenv: [ ".env" ]
    cmds:
      - mkdir -p ./tools/coverage/unit ./tools/coverage/integration ./tools/coverage/e2e
      - rm -rf ./tools/coverage/e2e/*
      - rm -rf ./tools/coverage/unit/*
      - rm -rf ./tools/coverage/integration/*
      - echo "- Unit tests"
      - "go test -cover ./... -args -test.gocoverdir={{.TOOLS_COVERAGE_DIR}}/unit | grep -v '\\[no test files\\]'"
      - echo "- Integration tests"
      - "go test -cover -tags integration ./... -args -test.gocoverdir={{.TOOLS_COVERAGE_DIR}}/integration | grep -v '\\[no test files\\]'"
      - task: tests:e2e
      - go tool covdata textfmt -i=./tools/coverage/unit,./tools/coverage/integration,./tools/coverage/e2e -o coverage.out
      - go tool covdata percent -i=./tools/coverage/unit,./tools/coverage/integration,./tools/coverage/e2e
      - echo "- Average coverage, %"
      - go tool covdata percent -i=./tools/coverage/unit,./tools/coverage/integration,./tools/coverage/e2e | grep -v '\[no statements\]' | awk '{print $3}' | sed 's/%//' |  awk '{ total += $1; count++ } END { print total/count }'

  tools:install:
    aliases: [ "dev-tools:install" ]
    vars:
      DEV_TOOLS: |
        github.com/daixiang0/gci@v0.11.2
        github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.15.0
        github.com/kazhuravlev/options-gen/cmd/options-gen@v0.30.0
        github.com/onsi/ginkgo/v2/ginkgo@v2.13.0
        go.uber.org/mock/mockgen@v0.3.0
        mvdan.cc/gofumpt@v0.5.0
        entgo.io/ent/cmd/ent@v0.12.4
    env:
      CGO_ENABLED: 0
    cmds:
      - echo "- Install dev tools"
      - mkdir -p "{{.TOOLS_DIR}}"
      - for: { var: DEV_TOOLS }
        cmd: GOBIN="{{.TOOLS_DIR}}" go install "{{ .ITEM }}"
      - task: golangci:install
      - task: tidy

  tools:install-golangci:
    aliases: [ "golangci:install" ]
    dir: "{{.TOOLS_DIR}}"
    cmds:
      - wget -q "{{.GOLANGCI_LINT_URL}}/{{.GOLANGCI_LINT_ARCHIVE_FILE}}"
      - wget -q "{{.GOLANGCI_LINT_URL}}/{{.GOLANGCI_LINT_CHECKSUMS_FILE}}"
      - grep "$(sha256sum {{.GOLANGCI_LINT_ARCHIVE_FILE}})" "{{.GOLANGCI_LINT_CHECKSUMS_FILE}}" > /dev/null
      - tar xf "{{.GOLANGCI_LINT_ARCHIVE_FILE}}" --strip-components 1 "{{.GOLANGCI_LINT_DIR}}/golangci-lint"
      - rm -f "{{.GOLANGCI_LINT_ARCHIVE_FILE}}" "{{.GOLANGCI_LINT_CHECKSUMS_FILE}}"
    status:
      - test -f "golangci-lint"

  kc:export:
    vars:
      KEYCLOAK_REALM: Bank
      KEYCLOAK_REALM_FILE: "./deploy/local/keycloak-{{.KEYCLOAK_REALM}}-realm.json"
    cmds:
      - |
        {{.DOCKER_COMPOSE_CMD}} exec keycloak /opt/keycloak/bin/kc.sh export \
          --realm {{.KEYCLOAK_REALM}} \
          --users same_file \
          --log file \
          --log-file /dev/stderr \
          --file /dev/stdout > {{.KEYCLOAK_REALM_FILE}}
