// Package apimanagerv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package apimanagerv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/ekhvalov/bank-chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeManagerOverloadedError ErrorCode = 5000
)

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode int

// FreeHandsAvailability defines model for FreeHandsAvailability.
type FreeHandsAvailability struct {
	Available bool `json:"available"`
}

// FreeHandsResponse defines model for FreeHandsResponse.
type FreeHandsResponse struct {
	Data  *interface{} `json:"data,omitempty"`
	Error *Error       `json:"error,omitempty"`
}

// GetFreeHandsBtnAvailabilityResponse defines model for GetFreeHandsBtnAvailabilityResponse.
type GetFreeHandsBtnAvailabilityResponse struct {
	Data  *FreeHandsAvailability `json:"data,omitempty"`
	Error *Error                 `json:"error,omitempty"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostFreeHandsParams defines parameters for PostFreeHands.
type PostFreeHandsParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetFreeHandsBtnAvailabilityParams defines parameters for PostGetFreeHandsBtnAvailability.
type PostGetFreeHandsBtnAvailabilityParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostFreeHandsWithBody request with any body
	PostFreeHandsWithBody(ctx context.Context, params *PostFreeHandsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetFreeHandsBtnAvailabilityWithBody request with any body
	PostGetFreeHandsBtnAvailabilityWithBody(ctx context.Context, params *PostGetFreeHandsBtnAvailabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostFreeHandsWithBody(ctx context.Context, params *PostFreeHandsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeHandsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetFreeHandsBtnAvailabilityWithBody(ctx context.Context, params *PostGetFreeHandsBtnAvailabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetFreeHandsBtnAvailabilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostFreeHandsRequestWithBody generates requests for PostFreeHands with any type of body
func NewPostFreeHandsRequestWithBody(server string, params *PostFreeHandsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/freeHands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, params.XRequestID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Request-ID", headerParam0)

	}

	return req, nil
}

// NewPostGetFreeHandsBtnAvailabilityRequestWithBody generates requests for PostGetFreeHandsBtnAvailability with any type of body
func NewPostGetFreeHandsBtnAvailabilityRequestWithBody(server string, params *PostGetFreeHandsBtnAvailabilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getFreeHandsBtnAvailability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, params.XRequestID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Request-ID", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostFreeHandsWithBodyWithResponse request with any body
	PostFreeHandsWithBodyWithResponse(ctx context.Context, params *PostFreeHandsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeHandsResponse, error)

	// PostGetFreeHandsBtnAvailabilityWithBodyWithResponse request with any body
	PostGetFreeHandsBtnAvailabilityWithBodyWithResponse(ctx context.Context, params *PostGetFreeHandsBtnAvailabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetFreeHandsBtnAvailabilityResponse, error)
}

type PostFreeHandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FreeHandsResponse
}

// Status returns HTTPResponse.Status
func (r PostFreeHandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFreeHandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetFreeHandsBtnAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFreeHandsBtnAvailabilityResponse
}

// Status returns HTTPResponse.Status
func (r PostGetFreeHandsBtnAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetFreeHandsBtnAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostFreeHandsWithBodyWithResponse request with arbitrary body returning *PostFreeHandsResponse
func (c *ClientWithResponses) PostFreeHandsWithBodyWithResponse(ctx context.Context, params *PostFreeHandsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeHandsResponse, error) {
	rsp, err := c.PostFreeHandsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeHandsResponse(rsp)
}

// PostGetFreeHandsBtnAvailabilityWithBodyWithResponse request with arbitrary body returning *PostGetFreeHandsBtnAvailabilityResponse
func (c *ClientWithResponses) PostGetFreeHandsBtnAvailabilityWithBodyWithResponse(ctx context.Context, params *PostGetFreeHandsBtnAvailabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetFreeHandsBtnAvailabilityResponse, error) {
	rsp, err := c.PostGetFreeHandsBtnAvailabilityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetFreeHandsBtnAvailabilityResponse(rsp)
}

// ParsePostFreeHandsResponse parses an HTTP response from a PostFreeHandsWithResponse call
func ParsePostFreeHandsResponse(rsp *http.Response) (*PostFreeHandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFreeHandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FreeHandsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGetFreeHandsBtnAvailabilityResponse parses an HTTP response from a PostGetFreeHandsBtnAvailabilityWithResponse call
func ParsePostGetFreeHandsBtnAvailabilityResponse(rsp *http.Response) (*PostGetFreeHandsBtnAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetFreeHandsBtnAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFreeHandsBtnAvailabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVW2/bNhT+K8TZHjZAspRmAwoBe0iatcmAYUEbYAUyPxxLxxIXimTJQ62Bof8+kPJF",
	"qd2ke9yTIfJcvwu9gdr01mjS7KHagEWHPTG59PXxPX0K5Pnm6pqwIRfPpIYKuukzA409QQUf821kfnMF",
	"GTj6FKSjBip2gTLwdUc9xuy1cT0yVBCCbCADfrQx37OTuoUMPuetybeH8ccv9iPMb3PZW+N4mpg7qKCV",
	"3IXVojZ9QQ/dgMoMxQr1Q153yLknN8iaCqmZnEZVpNowjuO4my4t/KtzJm1pnbHkWFI6rk1D8fd7R2uo",
	"4LviAFqxzS5S6psYOGbQEKNUKffphmMGPXmPLZ24G+fI3e8Ds6n/cszg0KTaQEO+dtKyNJGS2mhGqb24",
	"vru7FRQDRczzAnUjvKVarmUtVsFLTd4LZVpZP4n7gTsSCj2LPngWKxJ/hbI8p1/EWVmWPy4gA9Khh+r+",
	"57Islxn0Uss+HvxUlnsqI8Rt0sbnPIbnA7qoEh9X2s//O2psyf0xkFMGG2om5OOObx3RNerGXwwoFa6k",
	"kvx4zAlOt2oO5MoYRaiPkDzEPmnwnrw12tNx8QY5ynXMgHaKeJF7SGJ6R7yvf8l6vsOL7Z7tcRqW/zxh",
	"1DvVwUl+/BDvpgFWhI7cRYhW2n293Vn1tz/vYOuSBHK6PXi3Y7bT7lKvTWJDcqQFLlE/iA/BRquKNx2y",
	"2NIuLm5vIIOBnJ/EO5zFTYwljVZCBeeLcnEOWTJ3GrBY79ZP6BnPxw64olqhI+EIm0njbESHulEkrDMr",
	"Rb2PIo7IY8y5aaCCW+MPjKWWhxfw/jSoh5Di6IUcl5P0yPOlaR6n10MzaYZKB6WSMicdpFVeleWTmA2g",
	"tUrWacDibx8328we0G+SyF5piZZTKKXywseWkyiK9uvC/Trk74gFziJniGv65wXUn7HK/5uHb3kDTjAz",
	"jxOOfFATOTPLJijmZr1fxkXj39sOqC/ZHkgZ25NmMUVBBsGprW+rolCmRtUZz9Xr8vVZkZz4XBV6RV9W",
	"SknL8d8AAAD//zjXNQRMCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
