// Package managerevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package managerevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/ekhvalov/bank-chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for EventType.
const (
	EventTypeNewChatEvent    EventType = "NewChatEvent"
	EventTypeNewMessageEvent EventType = "NewMessageEvent"
)

// ChatID defines model for ChatID.
type ChatID = types.ChatID

// ClientID defines model for ClientID.
type ClientID = types.UserID

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// ID defines model for EventID.
type ID = types.EventID

// EventType defines model for EventType.
type EventType string

// MessageID defines model for MessageID.
type MessageID = types.MessageID

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CanTakeMoreProblems bool      `json:"canTakeMoreProblems"`
	ChatID              ChatID    `json:"chatId"`
	ClientID            ClientID  `json:"clientId"`
	ID                  ID        `json:"eventId"`
	EventType           string    `json:"eventType"`
	RequestID           RequestID `json:"requestId"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	ClientID  ClientID  `json:"authorId"`
	Body      string    `json:"body"`
	ChatID    ChatID    `json:"chatId"`
	CreatedAt time.Time `json:"createdAt"`
	ID        ID        `json:"eventId"`
	EventType string    `json:"eventType"`
	MessageID MessageID `json:"messageId"`
	RequestID RequestID `json:"requestId"`
}

// RequestID defines model for RequestID.
type RequestID = types.RequestID

// AsNewChatEvent returns the union data inside the Event as a NewChatEvent
func (t Event) AsNewChatEvent() (NewChatEvent, error) {
	var body NewChatEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewChatEvent overwrites any union data inside the Event as the provided NewChatEvent
func (t *Event) FromNewChatEvent(v NewChatEvent) error {
	v.EventType = "NewChatEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewChatEvent performs a merge with any union data inside the Event, using the provided NewChatEvent
func (t *Event) MergeNewChatEvent(v NewChatEvent) error {
	v.EventType = "NewChatEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "NewChatEvent":
		return t.AsNewChatEvent()
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWT0/bThD9Ktb8flIvThzoBfnWAqpQBVSFnlAOG3tib2PvbnfHSVHk717N2iY2mIZU",
	"4RRrd/68eW9mNltIdGm0QkUO4i24JMdS+M/zXNDVBX8ttS0FQQxVJVMIgR4NQgyOrFQZhPB7kumJEiUf",
	"tl7tYWvJP2768moiS6MtcQ4jKIcYMkl5tZgmuoxwla9FodfRQqjVJMkFTRzatUwwkorQKlFEPjDUdQjn",
	"hUT1L3g7vzHEPxzad0N8uUblA6XSJVaWUgnSlg9KYQwjjbdwgxumrbWF/6KdXFGrVeQv7xl3yPbX6JzI",
	"8I0udQjGaoOWHm8aRrB/pxXeLiF+2ML/FpevhRugrMO9xgOI9bwj43D1XtGti/aOwnmC4i2gqkqIH4ZC",
	"vdRh/ryOOoTW4PCqd45jxY/eHrH8YUtuu/aR6LdGItS9WOG1tvjN6kWBpT9uES60LlAorp7TXKV897dm",
	"aXcG2zeDut+jG+g6bFp5v0vXLp1Hp+0LxSz+qtC9IeL31vDCM8Zu0mLKfdJB6qd6IqNXZT9ZOMrqvB4Z",
	"9+dyiIpybQ9jbaHTx9HyD5bMoiBMP9GgwVNBOCFZIozMxLEVK9th2BtxNzXH0fmJ+JbPPhs9vcfbYYe6",
	"j4UF3yU8cGfsHMd2xujt0XYGcyPVUnuFJBWc97NQq+CuMpwh4JYJroUSGdrAa+sghDVaJ7WCGNYn/i0y",
	"qISREMPH6cl0BqGH5ds8clQt+CPD5klFflINNe5XFFQOXbDUNshQoRUkVRZ4xt00uKUc7UY6DCQFqUan",
	"PtAUfD621Ir7AL4g3XESVsQZrVwzYKezmV97WlE7gMKYQibeMfrpGED3t+pNXQ2ermEBt189i3UIzDFa",
	"51/koc0FrrHQpkRFQWMFIVS2gBg2Lo6iQieiyLWj+Gx2Nos2zj/UwxiXp5fPfb3hvP4TAAD///HGCTUo",
	"CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
