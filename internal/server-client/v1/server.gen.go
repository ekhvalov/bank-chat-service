// Package clientv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package clientv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/ekhvalov/bank-chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode = int

// GetHistoryRequest defines model for GetHistoryRequest.
type GetHistoryRequest struct {
	Cursor   *string `json:"cursor,omitempty"`
	PageSize *int    `json:"pageSize,omitempty"`
}

// GetHistoryResponse defines model for GetHistoryResponse.
type GetHistoryResponse struct {
	Data  MessagesPage `json:"data"`
	Error *Error       `json:"error,omitempty"`
}

// Message defines model for Message.
type Message struct {
	AuthorId   *types.UserID   `json:"authorId,omitempty"`
	Body       string          `json:"body"`
	CreatedAt  time.Time       `json:"createdAt"`
	Id         types.MessageID `json:"id"`
	IsBlocked  bool            `json:"isBlocked"`
	IsReceived bool            `json:"isReceived"`
	IsService  bool            `json:"isService"`
}

// MessagesPage defines model for MessagesPage.
type MessagesPage struct {
	Messages []Message `json:"messages"`
	Next     string    `json:"next"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostGetHistoryParams defines parameters for PostGetHistory.
type PostGetHistoryParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetHistoryJSONRequestBody defines body for PostGetHistory for application/json ContentType.
type PostGetHistoryJSONRequestBody = GetHistoryRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /getHistory)
	PostGetHistory(ctx echo.Context, params PostGetHistoryParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGetHistory converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetHistory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetHistoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGetHistory(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/getHistory", wrapper.PostGetHistory)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVTW/jNhD9K8S0hxaQLaXpYSGgh3y0mxRYINik6AKpD7Q0sdhIJJczMuIa+u/FULIt",
	"rd3uIkBOtsgZzps3j49bKFzjnUXLBPkWvA66QcYQvz59xM8tEt9e36AuMciasZBD1X8mYHWDkMOn2RA5",
	"u72GBAJ+bk3AEnIOLSZARYWNluwnFxrNkEPbmhIS4I2XfOJg7AoSeJmt3GxYlB+a7yGMd2em8S5wj5gr",
	"yGFluGqX88I1KT5Xa127dbrU9nlWVJpnhGFtCkyNZQxW12k8G7qu63boYsO/huBilz44j4ENxuXClSi/",
	"3wd8ghy+Sw+kpUN2GlOvJLBLoETWpo650w67BBok0is8sdeNmXvcByZ9/UWXwKFIvoUSqQjGs3EyksJZ",
	"1saSunl4uFMogUrySGlbKvJYmCdTqGVLxiKRqt3KFJO4H7hCVWti1bTEaonqrzbLzvEXdZZl2Y9zSKAx",
	"1jRtA/nPWbYfnpC6wiC9vUe+McQubIaxneCyDdRzfMSM1yu8N//E5hr90lc6k0r7umcnynZfFCbvLOFx",
	"5VKz/toUP/Sc050Q3yWAO0F8dfRH44vlZGgfDgOfAtItVy7clq+7GH8Qhje6FQksXbk5OaMioGYsL3gC",
	"utSMMzYNHiHvEjCvbHDg7c16NHRZu+IZy1GjS+dq1DbCpo9YoFn/9/59f/ap7S+0EDuOnI4ZnNQY4xkf",
	"PlJQr8ojGQ0+Ef8bxoa+UeTSxIBbh6A38m3xhb/ZmQiGhEW0USzaYHhzL1V6NEvUAcNFK3Paff2208Hv",
	"fz7AYL6Rurh7EEbF7Pu7beyTi5gM17Jzqe2zum+96EBdVZrVVW3Qsrq4u4UE1hiot8T1mbTkPFrtDeRw",
	"Ps/m55BE4UR86WpvG5FW1xvW1FjfIyuRkqr6SPFBoV/LvlxeuHPEBwOKBQ6v6OPpWRxC0qNXtlv0dCPx",
	"5XAPxd3RRnTa+9oUsXr6NwnE7eiB/b+5H7tzN52svNZxobfQyNFPWfYmAAaXjgimhO/UrmpDPI+P9Ehe",
	"kdGxsB4Xwpfc8x3f0+OucY21840opI+CBNpQDxrL07R2ha4rR5y/y95lqchm0f0bAAD//7XTXvkaCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
