// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

func Parse[T ChatID | MessageID | ProblemID | UserID | RequestID](id string) (T, error) {
	uid, err := uuid.Parse(id)
	if err != nil {
		return T(uuid.Nil), err
	}
	return T(uid), nil
}

func MustParse[T ChatID | MessageID | ProblemID | UserID | RequestID](id string) T {
	uid, err := uuid.Parse(id)
	if err != nil {
		panic(err)
	}
	return T(uid)
}

type ChatID uuid.UUID

var ChatIDNil = ChatID(uuid.Nil)

func NewChatID() ChatID {
	return ChatID(uuid.New())
}

func (c ChatID) MarshalText() (text []byte, err error) {
	return uuid.UUID(c).MarshalText()
}

func (c *ChatID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

func (c ChatID) Value() (driver.Value, error) {
	return c.String(), nil
}

func (c *ChatID) Scan(src any) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c ChatID) Validate() error {
	if c.IsZero() {
		return errors.New("zero ChatID")
	}
	return nil
}

func (c ChatID) Matches(x interface{}) bool {
	return c == x
}

// String describes what the matcher matches.
func (c ChatID) String() string {
	return uuid.UUID(c).String()
}

func (c ChatID) IsZero() bool {
	return c == ChatIDNil
}

type MessageID uuid.UUID

var MessageIDNil = MessageID(uuid.Nil)

func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

func (c MessageID) MarshalText() (text []byte, err error) {
	return uuid.UUID(c).MarshalText()
}

func (c *MessageID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

func (c MessageID) Value() (driver.Value, error) {
	return c.String(), nil
}

func (c *MessageID) Scan(src any) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c MessageID) Validate() error {
	if c.IsZero() {
		return errors.New("zero MessageID")
	}
	return nil
}

func (c MessageID) Matches(x interface{}) bool {
	return c == x
}

// String describes what the matcher matches.
func (c MessageID) String() string {
	return uuid.UUID(c).String()
}

func (c MessageID) IsZero() bool {
	return c == MessageIDNil
}

type ProblemID uuid.UUID

var ProblemIDNil = ProblemID(uuid.Nil)

func NewProblemID() ProblemID {
	return ProblemID(uuid.New())
}

func (c ProblemID) MarshalText() (text []byte, err error) {
	return uuid.UUID(c).MarshalText()
}

func (c *ProblemID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

func (c ProblemID) Value() (driver.Value, error) {
	return c.String(), nil
}

func (c *ProblemID) Scan(src any) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c ProblemID) Validate() error {
	if c.IsZero() {
		return errors.New("zero ProblemID")
	}
	return nil
}

func (c ProblemID) Matches(x interface{}) bool {
	return c == x
}

// String describes what the matcher matches.
func (c ProblemID) String() string {
	return uuid.UUID(c).String()
}

func (c ProblemID) IsZero() bool {
	return c == ProblemIDNil
}

type UserID uuid.UUID

var UserIDNil = UserID(uuid.Nil)

func NewUserID() UserID {
	return UserID(uuid.New())
}

func (c UserID) MarshalText() (text []byte, err error) {
	return uuid.UUID(c).MarshalText()
}

func (c *UserID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

func (c UserID) Value() (driver.Value, error) {
	return c.String(), nil
}

func (c *UserID) Scan(src any) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c UserID) Validate() error {
	if c.IsZero() {
		return errors.New("zero UserID")
	}
	return nil
}

func (c UserID) Matches(x interface{}) bool {
	return c == x
}

// String describes what the matcher matches.
func (c UserID) String() string {
	return uuid.UUID(c).String()
}

func (c UserID) IsZero() bool {
	return c == UserIDNil
}

type RequestID uuid.UUID

var RequestIDNil = RequestID(uuid.Nil)

func NewRequestID() RequestID {
	return RequestID(uuid.New())
}

func (c RequestID) MarshalText() (text []byte, err error) {
	return uuid.UUID(c).MarshalText()
}

func (c *RequestID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

func (c RequestID) Value() (driver.Value, error) {
	return c.String(), nil
}

func (c *RequestID) Scan(src any) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c RequestID) Validate() error {
	if c.IsZero() {
		return errors.New("zero RequestID")
	}
	return nil
}

func (c RequestID) Matches(x interface{}) bool {
	return c == x
}

// String describes what the matcher matches.
func (c RequestID) String() string {
	return uuid.UUID(c).String()
}

func (c RequestID) IsZero() bool {
	return c == RequestIDNil
}
