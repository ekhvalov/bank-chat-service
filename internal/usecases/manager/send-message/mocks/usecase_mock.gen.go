// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/usecase_mock.gen.go -typed -package=sendmessagemocks
//
// Package sendmessagemocks is a generated GoMock package.
package sendmessagemocks

import (
	context "context"
	reflect "reflect"
	time "time"

	messagesrepo "github.com/ekhvalov/bank-chat-service/internal/repositories/messages"
	types "github.com/ekhvalov/bank-chat-service/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockmessagesRepository is a mock of messagesRepository interface.
type MockmessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesRepositoryMockRecorder
}

// MockmessagesRepositoryMockRecorder is the mock recorder for MockmessagesRepository.
type MockmessagesRepositoryMockRecorder struct {
	mock *MockmessagesRepository
}

// NewMockmessagesRepository creates a new mock instance.
func NewMockmessagesRepository(ctrl *gomock.Controller) *MockmessagesRepository {
	mock := &MockmessagesRepository{ctrl: ctrl}
	mock.recorder = &MockmessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessagesRepository) EXPECT() *MockmessagesRepositoryMockRecorder {
	return m.recorder
}

// CreateFullVisible mocks base method.
func (m *MockmessagesRepository) CreateFullVisible(ctx context.Context, reqID types.RequestID, problemID types.ProblemID, chatID types.ChatID, authorID types.UserID, msgBody string) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFullVisible", ctx, reqID, problemID, chatID, authorID, msgBody)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFullVisible indicates an expected call of CreateFullVisible.
func (mr *MockmessagesRepositoryMockRecorder) CreateFullVisible(ctx, reqID, problemID, chatID, authorID, msgBody any) *messagesRepositoryCreateFullVisibleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFullVisible", reflect.TypeOf((*MockmessagesRepository)(nil).CreateFullVisible), ctx, reqID, problemID, chatID, authorID, msgBody)
	return &messagesRepositoryCreateFullVisibleCall{Call: call}
}

// messagesRepositoryCreateFullVisibleCall wrap *gomock.Call
type messagesRepositoryCreateFullVisibleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *messagesRepositoryCreateFullVisibleCall) Return(arg0 *messagesrepo.Message, arg1 error) *messagesRepositoryCreateFullVisibleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *messagesRepositoryCreateFullVisibleCall) Do(f func(context.Context, types.RequestID, types.ProblemID, types.ChatID, types.UserID, string) (*messagesrepo.Message, error)) *messagesRepositoryCreateFullVisibleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *messagesRepositoryCreateFullVisibleCall) DoAndReturn(f func(context.Context, types.RequestID, types.ProblemID, types.ChatID, types.UserID, string) (*messagesrepo.Message, error)) *messagesRepositoryCreateFullVisibleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockoutboxService is a mock of outboxService interface.
type MockoutboxService struct {
	ctrl     *gomock.Controller
	recorder *MockoutboxServiceMockRecorder
}

// MockoutboxServiceMockRecorder is the mock recorder for MockoutboxService.
type MockoutboxServiceMockRecorder struct {
	mock *MockoutboxService
}

// NewMockoutboxService creates a new mock instance.
func NewMockoutboxService(ctrl *gomock.Controller) *MockoutboxService {
	mock := &MockoutboxService{ctrl: ctrl}
	mock.recorder = &MockoutboxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoutboxService) EXPECT() *MockoutboxServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockoutboxService) Put(ctx context.Context, name, payload string, availableAt time.Time) (types.JobID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, name, payload, availableAt)
	ret0, _ := ret[0].(types.JobID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockoutboxServiceMockRecorder) Put(ctx, name, payload, availableAt any) *outboxServicePutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockoutboxService)(nil).Put), ctx, name, payload, availableAt)
	return &outboxServicePutCall{Call: call}
}

// outboxServicePutCall wrap *gomock.Call
type outboxServicePutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *outboxServicePutCall) Return(arg0 types.JobID, arg1 error) *outboxServicePutCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *outboxServicePutCall) Do(f func(context.Context, string, string, time.Time) (types.JobID, error)) *outboxServicePutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *outboxServicePutCall) DoAndReturn(f func(context.Context, string, string, time.Time) (types.JobID, error)) *outboxServicePutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockproblemsRepository is a mock of problemsRepository interface.
type MockproblemsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepositoryMockRecorder
}

// MockproblemsRepositoryMockRecorder is the mock recorder for MockproblemsRepository.
type MockproblemsRepositoryMockRecorder struct {
	mock *MockproblemsRepository
}

// NewMockproblemsRepository creates a new mock instance.
func NewMockproblemsRepository(ctrl *gomock.Controller) *MockproblemsRepository {
	mock := &MockproblemsRepository{ctrl: ctrl}
	mock.recorder = &MockproblemsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepository) EXPECT() *MockproblemsRepositoryMockRecorder {
	return m.recorder
}

// GetAssignedProblemID mocks base method.
func (m *MockproblemsRepository) GetAssignedProblemID(ctx context.Context, managerID types.UserID, chatID types.ChatID) (types.ProblemID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedProblemID", ctx, managerID, chatID)
	ret0, _ := ret[0].(types.ProblemID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedProblemID indicates an expected call of GetAssignedProblemID.
func (mr *MockproblemsRepositoryMockRecorder) GetAssignedProblemID(ctx, managerID, chatID any) *problemsRepositoryGetAssignedProblemIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedProblemID", reflect.TypeOf((*MockproblemsRepository)(nil).GetAssignedProblemID), ctx, managerID, chatID)
	return &problemsRepositoryGetAssignedProblemIDCall{Call: call}
}

// problemsRepositoryGetAssignedProblemIDCall wrap *gomock.Call
type problemsRepositoryGetAssignedProblemIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *problemsRepositoryGetAssignedProblemIDCall) Return(arg0 types.ProblemID, arg1 error) *problemsRepositoryGetAssignedProblemIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *problemsRepositoryGetAssignedProblemIDCall) Do(f func(context.Context, types.UserID, types.ChatID) (types.ProblemID, error)) *problemsRepositoryGetAssignedProblemIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *problemsRepositoryGetAssignedProblemIDCall) DoAndReturn(f func(context.Context, types.UserID, types.ChatID) (types.ProblemID, error)) *problemsRepositoryGetAssignedProblemIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mocktransactor is a mock of transactor interface.
type Mocktransactor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactorMockRecorder
}

// MocktransactorMockRecorder is the mock recorder for Mocktransactor.
type MocktransactorMockRecorder struct {
	mock *Mocktransactor
}

// NewMocktransactor creates a new mock instance.
func NewMocktransactor(ctrl *gomock.Controller) *Mocktransactor {
	mock := &Mocktransactor{ctrl: ctrl}
	mock.recorder = &MocktransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransactor) EXPECT() *MocktransactorMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *Mocktransactor) RunInTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MocktransactorMockRecorder) RunInTx(ctx, f any) *transactorRunInTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*Mocktransactor)(nil).RunInTx), ctx, f)
	return &transactorRunInTxCall{Call: call}
}

// transactorRunInTxCall wrap *gomock.Call
type transactorRunInTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *transactorRunInTxCall) Return(arg0 error) *transactorRunInTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *transactorRunInTxCall) Do(f func(context.Context, func(context.Context) error) error) *transactorRunInTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *transactorRunInTxCall) DoAndReturn(f func(context.Context, func(context.Context) error) error) *transactorRunInTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
