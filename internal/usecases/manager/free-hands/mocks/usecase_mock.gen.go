// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/usecase_mock.gen.go -typed -package=freehandsmocks
//
// Package freehandsmocks is a generated GoMock package.
package freehandsmocks

import (
	context "context"
	reflect "reflect"

	types "github.com/ekhvalov/bank-chat-service/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockmanagerLoadService is a mock of managerLoadService interface.
type MockmanagerLoadService struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerLoadServiceMockRecorder
}

// MockmanagerLoadServiceMockRecorder is the mock recorder for MockmanagerLoadService.
type MockmanagerLoadServiceMockRecorder struct {
	mock *MockmanagerLoadService
}

// NewMockmanagerLoadService creates a new mock instance.
func NewMockmanagerLoadService(ctrl *gomock.Controller) *MockmanagerLoadService {
	mock := &MockmanagerLoadService{ctrl: ctrl}
	mock.recorder = &MockmanagerLoadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerLoadService) EXPECT() *MockmanagerLoadServiceMockRecorder {
	return m.recorder
}

// CanManagerTakeProblem mocks base method.
func (m *MockmanagerLoadService) CanManagerTakeProblem(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManagerTakeProblem", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanManagerTakeProblem indicates an expected call of CanManagerTakeProblem.
func (mr *MockmanagerLoadServiceMockRecorder) CanManagerTakeProblem(ctx, managerID any) *managerLoadServiceCanManagerTakeProblemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManagerTakeProblem", reflect.TypeOf((*MockmanagerLoadService)(nil).CanManagerTakeProblem), ctx, managerID)
	return &managerLoadServiceCanManagerTakeProblemCall{Call: call}
}

// managerLoadServiceCanManagerTakeProblemCall wrap *gomock.Call
type managerLoadServiceCanManagerTakeProblemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *managerLoadServiceCanManagerTakeProblemCall) Return(arg0 bool, arg1 error) *managerLoadServiceCanManagerTakeProblemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *managerLoadServiceCanManagerTakeProblemCall) Do(f func(context.Context, types.UserID) (bool, error)) *managerLoadServiceCanManagerTakeProblemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *managerLoadServiceCanManagerTakeProblemCall) DoAndReturn(f func(context.Context, types.UserID) (bool, error)) *managerLoadServiceCanManagerTakeProblemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockmanagerPool is a mock of managerPool interface.
type MockmanagerPool struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerPoolMockRecorder
}

// MockmanagerPoolMockRecorder is the mock recorder for MockmanagerPool.
type MockmanagerPoolMockRecorder struct {
	mock *MockmanagerPool
}

// NewMockmanagerPool creates a new mock instance.
func NewMockmanagerPool(ctrl *gomock.Controller) *MockmanagerPool {
	mock := &MockmanagerPool{ctrl: ctrl}
	mock.recorder = &MockmanagerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerPool) EXPECT() *MockmanagerPoolMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockmanagerPool) Contains(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockmanagerPoolMockRecorder) Contains(ctx, managerID any) *managerPoolContainsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockmanagerPool)(nil).Contains), ctx, managerID)
	return &managerPoolContainsCall{Call: call}
}

// managerPoolContainsCall wrap *gomock.Call
type managerPoolContainsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *managerPoolContainsCall) Return(arg0 bool, arg1 error) *managerPoolContainsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *managerPoolContainsCall) Do(f func(context.Context, types.UserID) (bool, error)) *managerPoolContainsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *managerPoolContainsCall) DoAndReturn(f func(context.Context, types.UserID) (bool, error)) *managerPoolContainsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Put mocks base method.
func (m *MockmanagerPool) Put(ctx context.Context, managerID types.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, managerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockmanagerPoolMockRecorder) Put(ctx, managerID any) *managerPoolPutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockmanagerPool)(nil).Put), ctx, managerID)
	return &managerPoolPutCall{Call: call}
}

// managerPoolPutCall wrap *gomock.Call
type managerPoolPutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *managerPoolPutCall) Return(arg0 error) *managerPoolPutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *managerPoolPutCall) Do(f func(context.Context, types.UserID) error) *managerPoolPutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *managerPoolPutCall) DoAndReturn(f func(context.Context, types.UserID) error) *managerPoolPutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
